#include <limits.h>
#include <stdbool.h>
#include <stdio.h>
#define V 6

int minKey(int key[], bool mst[]){
	int min = INT_MAX;
    int min_index;

	for (int i = 0; i < V; i++)
		if (mst[i] == false && key[i] < min)
			min = key[i], min_index = i;

	return min_index;
}

void print(int parent[], int graph[V][V])
{
    int total =0;
	printf("Edge \tCost\n");
	for (int i = 1; i < V; i++){
        printf("%d - %d \t%d \n", parent[i], i,graph[i][parent[i]]);
        total += graph[i][parent[i]];
    }
    printf("Total cost -> %d",total);
}


void prim(int graph[V][V],int node)
{
	int parent[V];
    int key[V];
	bool mst[V];


	for (int i = 0; i < V; i++){
		key[i] = INT_MAX; 
        mst[i] = false;
    }

    key[0] = node;

	parent[0] = -1;

	for (int count = 0; count<V-1; count++) {
		int u = minKey(key, mst);
		mst[u] = true;

		for (int v = 0; v < V; v++){
			if (graph[u][v] && mst[v] == false
				&& graph[u][v] < key[v]){
                    parent[v] = u;
                    key[v] = graph[u][v];
                }
        }
	}
	print(parent, graph);
}


int main(){
	int graph[V][V] = { {0,3,0,0,0,1},
                        {3,0,2,1,10,0},
                        {0,2,0,3,0,5},
                        {0,1,3,0,5,0} ,
                        {0,10,0,5,0,4},
                        {1,0,5,0,4,0}};

	prim(graph,0);
	return 0;
}
